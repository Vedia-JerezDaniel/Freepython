{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python38564bitbase2e2f0dae54b8424eb8c34441d12cf734",
   "display_name": "Python 3.8.5 64-bit ('base')"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "&lt;_io.TextIOWrapper name=&#39;data/btc-market-price.csv&#39; mode=&#39;r&#39; encoding=&#39;UTF-8&#39;&gt;\n"
    }
   ],
   "source": [
    "with open('data/btc-market-price.csv', 'r') as fp:\n",
    "    print(fp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "0 2017-04-02 00:00:00,1099.169125\n\n1 2017-04-03 00:00:00,1141.813\n\n2 2017-04-04 00:00:00,1141.6003625\n\n3 2017-04-05 00:00:00,1133.0793142857142\n\n4 2017-04-06 00:00:00,1196.3079375\n\n5 2017-04-07 00:00:00,1190.45425\n\n6 2017-04-08 00:00:00,1181.1498375\n\n7 2017-04-09 00:00:00,1208.8005\n\n8 2017-04-10 00:00:00,1207.744875\n\n9 2017-04-11 00:00:00,1226.6170375\n\n"
    }
   ],
   "source": [
    "with open('data/btc-market-price.csv', 'r') as fp:\n",
    "    for index, line in enumerate(fp.readlines()):\n",
    "        # read just the first 10 lines\n",
    "        if (index < 10):\n",
    "            print(index, line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "2017-04-02 00:00:00: $1099.169125\n2017-04-03 00:00:00: $1141.813\n2017-04-04 00:00:00: $1141.6003625\n2017-04-05 00:00:00: $1133.0793142857142\n2017-04-06 00:00:00: $1196.3079375\n2017-04-07 00:00:00: $1190.45425\n2017-04-08 00:00:00: $1181.1498375\n2017-04-09 00:00:00: $1208.8005\n2017-04-10 00:00:00: $1207.744875\n2017-04-11 00:00:00: $1226.6170375\n"
    }
   ],
   "source": [
    "import csv\n",
    "\n",
    "with open('data/btc-market-price.csv', 'r') as fp:\n",
    "    reader = csv.reader(fp)\n",
    "    for index, (timestamp, price) in enumerate(reader):\n",
    "        # read just the first 10 lines\n",
    "        if (index < 10):\n",
    "            print(f\"{timestamp}: ${price}\")"
   ]
  },
  {
   "source": [
    "The csv modules takes care of splitting the file using a given separator (called `delimiter`) and creating an iterator for us."
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('exam_review.csv', 'r') as fp:\n",
    "    reader = csv.reader(fp, delimiter='>')  # special delimiter\n",
    "    next(reader)  # skipping header\n",
    "    for index, values in enumerate(reader):\n",
    "        if not values:\n",
    "            continue  # skip empty lines\n",
    "        fname, lname, age, math, french = values\n",
    "        print(f\"{fname} {lname} (age {age}) got {math} in Math and {french} in French\")"
   ]
  },
  {
   "source": [
    "## Reading data with Pandas\n",
    "\n",
    "Probably one of the most recurrent types of work for data analysis: public data sources, logs, historical information tables, exports from databases. So the pandas library offers us functions to read and write files in multiple formats like CSV, JSON, XML and Excel's XLSX, all of them creating a DataFrame with the information read from the file.\n",
    "\n",
    "We'll learn how to read different type of data including:\n",
    "\n",
    "* CSV files (.csv)\n",
    "* Raw text files (.txt)\n",
    "* JSON data from a file and from an API\n",
    "* Data from a SQL query over a database"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": "  Country Name Country Code  Year         Value\n0   Arab World          ARB  1968  2.576068e+10\n1   Arab World          ARB  1969  2.843420e+10\n2   Arab World          ARB  1970  3.138550e+10\n3   Arab World          ARB  1971  3.642691e+10\n4   Arab World          ARB  1972  4.331606e+10",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country Name</th>\n      <th>Country Code</th>\n      <th>Year</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Arab World</td>\n      <td>ARB</td>\n      <td>1968</td>\n      <td>2.576068e+10</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Arab World</td>\n      <td>ARB</td>\n      <td>1969</td>\n      <td>2.843420e+10</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Arab World</td>\n      <td>ARB</td>\n      <td>1970</td>\n      <td>3.138550e+10</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Arab World</td>\n      <td>ARB</td>\n      <td>1971</td>\n      <td>3.642691e+10</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Arab World</td>\n      <td>ARB</td>\n      <td>1972</td>\n      <td>4.331606e+10</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "execution_count": 6
    }
   ],
   "source": [
    "csv_url = \"https://raw.githubusercontent.com/datasets/gdp/master/data/gdp.csv\"\n",
    "\n",
    "pd.read_csv(csv_url).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": "   2017-04-02 00:00:00  1099.169125\n0  2017-04-03 00:00:00  1141.813000\n1  2017-04-04 00:00:00  1141.600363\n2  2017-04-05 00:00:00  1133.079314\n3  2017-04-06 00:00:00  1196.307937\n4  2017-04-07 00:00:00  1190.454250",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>2017-04-02 00:00:00</th>\n      <th>1099.169125</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2017-04-03 00:00:00</td>\n      <td>1141.813000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2017-04-04 00:00:00</td>\n      <td>1141.600363</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2017-04-05 00:00:00</td>\n      <td>1133.079314</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2017-04-06 00:00:00</td>\n      <td>1196.307937</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2017-04-07 00:00:00</td>\n      <td>1190.454250</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "execution_count": 8
    }
   ],
   "source": [
    "df = pd.read_csv('data/btc-market-price.csv')\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": "                     0            1\n0  2017-04-02 00:00:00  1099.169125\n1  2017-04-03 00:00:00  1141.813000\n2  2017-04-04 00:00:00  1141.600363\n3  2017-04-05 00:00:00  1133.079314\n4  2017-04-06 00:00:00  1196.307937",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2017-04-02 00:00:00</td>\n      <td>1099.169125</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2017-04-03 00:00:00</td>\n      <td>1141.813000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2017-04-04 00:00:00</td>\n      <td>1141.600363</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2017-04-05 00:00:00</td>\n      <td>1133.079314</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2017-04-06 00:00:00</td>\n      <td>1196.307937</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "execution_count": 10
    }
   ],
   "source": [
    " # Missing values with na_values parameter\n",
    "\n",
    "df = pd.read_csv('data/btc-market-price.csv',\n",
    "                 header=None, na_values=['', '?', '-'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;\nRangeIndex: 365 entries, 0 to 364\nData columns (total 2 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   Timestamp  365 non-null    object \n 1   Price      365 non-null    float64\ndtypes: float64(1), object(1)\nmemory usage: 5.8+ KB\n"
    }
   ],
   "source": [
    "# Column names using names parameter\n",
    "\n",
    "df = pd.read_csv('data/btc-market-price.csv', header=None,\n",
    "                 na_values=['', '?', '-'], names=['Timestamp', 'Price'])\n",
    "df.head()\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": "Timestamp     object\nPrice        float64\ndtype: object"
     },
     "metadata": {},
     "execution_count": 13
    }
   ],
   "source": [
    "# Column types using dtype parameter\n",
    "\n",
    "df = pd.read_csv('data/btc-market-price.csv',\n",
    "                 header=None, na_values=['', '?', '-'],\n",
    "                 names=['Timestamp', 'Price'], dtype={'Price': 'float'})\n",
    "\n",
    "df.head()\n",
    "df.dtypes"
   ]
  },
  {
   "source": [
    "The `Timestamp` column was interpreted as a regular string (object in pandas notation), we can parse it manually using a vectorized operation as we saw on previous courses.\n",
    "\n",
    "We'll parse **Timestamp column to Datetime objects using to_datetime method**:"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": "Timestamp    datetime64[ns]\nPrice               float64\ndtype: object"
     },
     "metadata": {},
     "execution_count": 14
    }
   ],
   "source": [
    "df['Timestamp'] = pd.to_datetime(df['Timestamp'])\n",
    "\n",
    "df.head()\n",
    "df.dtypes"
   ]
  },
  {
   "source": [
    "Another way of dealing with `Datetime` objects is using parse_dates parameter with the position of the columns with dates."
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": "Timestamp    datetime64[ns]\nPrice               float64\ndtype: object"
     },
     "metadata": {},
     "execution_count": 16
    }
   ],
   "source": [
    "df = pd.read_csv('data/btc-market-price.csv',\n",
    "                 header=None, na_values=['', '?', '-'],\n",
    "                 names=['Timestamp', 'Price'],\n",
    "                 dtype={'Price': 'float'}, parse_dates=[0])\n",
    "df.head()\n",
    "df.dtypes"
   ]
  },
  {
   "source": [
    "### Adding index to our data using index_col parameter"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": "                  Price\nTimestamp              \n2017-04-02  1099.169125\n2017-04-03  1141.813000\n2017-04-04  1141.600363\n2017-04-05  1133.079314\n2017-04-06  1196.307937",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Price</th>\n    </tr>\n    <tr>\n      <th>Timestamp</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2017-04-02</th>\n      <td>1099.169125</td>\n    </tr>\n    <tr>\n      <th>2017-04-03</th>\n      <td>1141.813000</td>\n    </tr>\n    <tr>\n      <th>2017-04-04</th>\n      <td>1141.600363</td>\n    </tr>\n    <tr>\n      <th>2017-04-05</th>\n      <td>1133.079314</td>\n    </tr>\n    <tr>\n      <th>2017-04-06</th>\n      <td>1196.307937</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "execution_count": 18
    }
   ],
   "source": [
    "df = pd.read_csv('data/btc-market-price.csv',\n",
    "                 header=None, na_values=['', '?', '-'],\n",
    "                 names=['Timestamp', 'Price'], dtype={'Price': 'float'},\n",
    "                 parse_dates=[0], index_col=[0])\n",
    "df.head()"
   ]
  },
  {
   "source": [
    "###  Custom numeric decimal and thousands character\n",
    "\n"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "exam_df = pd.read_csv('exam_review.csv',\n",
    "                      sep='>', decimal=',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "exam_df = pd.read_csv('exam_review.csv',\n",
    "                      sep='>', decimal=',', skiprows=[1,3])"
   ]
  },
  {
   "source": [
    "### Loading specific columns"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.read_csv('exam_review.csv', usecols=['first_name', 'last_name', 'age'], sep='>')\n",
    "\n",
    "pd.read_csv('exam_review.csv', usecols=[0, 1, 2], sep='>')"
   ]
  },
  {
   "source": [
    "### Using a Series instead of DataFrame"
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "exam_test_2 = pd.read_csv('exam_review.csv',sep='>', usecols=['last_name'],squeeze=True)"
   ]
  },
  {
   "source": [
    "### Saving "
   ],
   "cell_type": "markdown",
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "exam_df.to_csv('out.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "exam_df.to_csv('out.csv', index=None)"
   ]
  }
 ]
}